import requests, json, random, string, time,pyfiglet,termcolor
from bs4 import BeautifulSoup
import os, sys
os.system('pip install requests')
os.system('pip install bs4')
os.system('clear')
import sys, os, time, datetime
logo = pyfiglet.figlet_format('By Bebo 🔥')
descr = """
 By: Bahaa404 🔥
 """
print(termcolor.colored(logo, color="red"), termcolor.colored(descr, color="yellow"))
print("\x1b[0;36m=" * 60)
n = '\x1b[0;35m Contact Me On Telegram @levay0  '
for c in n:
    sys.stdout.write(c)
    sys.stdout.flush()
    time.sleep(0.09)
else:
            print()
            p = '\x1b[0;37m Free 1GB Offer By ERROR404 :)\n'
            for o in p:
                sys.stdout.write(o)
                sys.stdout.flush()
                time.sleep(0.05)
            else:
                    print()
                    print()
                    number = input('\x1b[0;35mEnter Your Number : ').strip()
                    print(" " * 60)
                    pwd = input('\x1b[0;36mEnter Your Password  : ').strip()
                    with requests.Session() as req:

                        def generationLink(stringLingth):
                            latters = string.ascii_lowercase
                            return ''.join((random.choice(latters) for i in range(stringLingth)))


                        url = f"https://web.vodafone.com.eg/auth/realms/vf-realm/protocol/openid-connect/auth?client_id=website&redirect_uri=https%3A%2F%2Fweb.vodafone.com.eg%2Far%2FKClogin&state=286d1217-db14-4846-86c1-9539beea01ed&response_mode=query&response_type=code&scope=openid&nonce={generationLink(10)}&kc_locale=en"
                        responsePageLogin = req.get(url)
                        soup = BeautifulSoup(responsePageLogin.content, 'html.parser')
                        getUrlAction = soup.find('form').get('action')
                        headerRequest = {'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                         'Accept-Encoding':'gzip, deflate, br',
                         'Accept-Language':'en-GB,en;q=0.9,ar;q=0.8,ar-EG;q=0.7,en-US;q=0.6',
                         'Connection':'keep-alive',
                         'Content-Type':'application/x-www-form-urlencoded',
                         'Host':'web.vodafone.com.eg',
                         'Origin':'https://web.vodafone.com.eg',
                         'Referer':url,
                         'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'}
                        formData = {'username':number,
                         'password':pwd}
                        sendUserData = req.post(getUrlAction, headers=headerRequest, data=formData)
                        checkRegistry = sendUserData.url
                        _checkRegistry = checkRegistry.find('KClogin')
                        if _checkRegistry != -1:
        