W1wb3J0IHJlcXVlc3RzLCBqc29uLCByYW5kb20sIHN0cmluZywgdGltZSxweWZpZ2xldCx0ZXJtY29sb3IKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKaW1wb3J0IG9zLCBzeXMKb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykKb3Muc3lzdGVtKCdjbGVhcicpCmltcG9ydCBzeXMsIG9zLCB0aW1lLCBkYXRldGltZQpsb2dvID0gcHlmaWdsZXQuZmlnbGV0X2Zvcm1hdCgnQnkgQmVibyDwn5SlJykKZGVzY3IgPSAiIiIKIEJ5OiBCYWhhYTQwNCDwn5SlCiAiIiIKcHJpbnQodGVybWNvbG9yLmNvbG9yZWQobG9nbywgY29sb3I9InJlZCIpLCB0ZXJtY29sb3IuY29sb3JlZChkZXNjciwgY29sb3I9InllbGxvdyIpKQpwcmludCgiXHgxYlswOzM2bT0iICogNjApCm4gPSAnXHgxYlswOzM1bSBDb250YWN0IE1lIE9uIFRlbGVncmFtIEBsZXZheTAgICcKZm9yIGMgaW4gbjoKICAgIHN5cy5zdGRvdXQud3JpdGUoYykKICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgdGltZS5zbGVlcCgwLjA5KQplbHNlOgogICAgICAgICAgICBwcmludCgpCiAgICAgICAgICAgIHAgPSAnXHgxYlswOzM3bSBGcmVlIDFHQiBPZmZlciBCeSBFUlJPUjQwNCA6KVxuJwogICAgICAgICAgICBmb3IgbyBpbiBwOgogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShvKQogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoKQogICAgICAgICAgICAgICAgICAgIHByaW50KCkKICAgICAgICAgICAgICAgICAgICBudW1iZXIgPSBpbnB1dCgnXHgxYlswOzM1bUVudGVyIFlvdXIgTnVtYmVyIDogJykuc3RyaXAoKQogICAgICAgICAgICAgICAgICAgIHByaW50KCIgIiAqIDYwKQogICAgICAgICAgICAgICAgICAgIHB3ZCA9IGlucHV0KCdceDFiWzA7MzZtRW50ZXIgWW91ciBQYXNzd29yZCAgOiAnKS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgcmVxOgoKICAgICAgICAgICAgICAgICAgICAgICAgZGVmIGdlbmVyYXRpb25MaW5rKHN0cmluZ0xpbmd0aCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXR0ZXJzID0gc3RyaW5nLmFzY2lpX2xvd2VyY2FzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnLmpvaW4oKHJhbmRvbS5jaG9pY2UobGF0dGVycykgZm9yIGkgaW4gcmFuZ2Uoc3RyaW5nTGluZ3RoKSkpCgoKICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gZiJodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXV0aC9yZWFsbXMvdmYtcmVhbG0vcHJvdG9jb2wvb3BlbmlkLWNvbm5lY3QvYXV0aD9jbGllbnRfaWQ9d2Vic2l0ZSZyZWRpcmVjdF91cmk9aHR0cHMlM0ElMkYlMkZ3ZWIudm9kYWZvbmUuY29tLmVnJTJGYXIlMkZLQ2xvZ2luJnN0YXRlPTI4NmQxMjE3LWRiMTQtNDg0Ni04NmMxLTk1MzliZWVhMDFlZCZyZXNwb25zZV9tb2RlPXF1ZXJ5JnJlc3BvbnNlX3R5cGU9Y29kZSZzY29wZT1vcGVuaWQmbm9uY2U9e2dlbmVyYXRpb25MaW5rKDEwKX0ma2NfbG9jYWxlPWVuIgogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVBhZ2VMb2dpbiA9IHJlcS5nZXQodXJsKQogICAgICAgICAgICAgICAgICAgICAgICBzb3VwID0gQmVhdXRpZnVsU291cChyZXNwb25zZVBhZ2VMb2dpbi5jb250ZW50LCAnaHRtbC5wYXJzZXInKQogICAgICAgICAgICAgICAgICAgICAgICBnZXRVcmxBY3Rpb24gPSBzb3VwLmZpbmQoJ2Zvcm0nKS5nZXQoJ2FjdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlclJlcXVlc3QgPSB7J0FjY2VwdCc6J3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjknLAogICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUsIGJyJywKICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOidlbi1HQixlbjtxPTAuOSxhcjtxPTAuOCxhci1FRztxPTAuNyxlbi1VUztxPTAuNicsCiAgICAgICAgICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbic6J2tlZXAtYWxpdmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAnSG9zdCc6J3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgICAgICAgICAgICAgICAgICAgICAgJ09yaWdpbic6J2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZycsCiAgICAgICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6dXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOidNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODEuMC40MDQ0LjEzOCBTYWZhcmkvNTM3LjM2J30KICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEgPSB7J3VzZXJuYW1lJzpudW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOnB3ZH0KICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFVzZXJEYXRhID0gcmVxLnBvc3QoZ2V0VXJsQWN0aW9uLCBoZWFkZXJzPWhlYWRlclJlcXVlc3QsIGRhdGE9Zm9ybURhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUmVnaXN0cnkgPSBzZW5kVXNlckRhdGEudXJsCiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1JlZ2lzdHJ5ID0gY2hlY2tSZWdpc3RyeS5maW5kKCdLQ2xvZ2luJykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgX2NoZWNrUmVnaXN0cnkgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gY2hlY2tSZWdpc3RyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvZGUgPSBjb2RlW2NvZGUuaW5kZXgoJ2NvZGU9JykgKyA1Ol0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IHsnQWNjZXB0JzonKi8qJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZSwgYnInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOidlbi1HQixlbjtxPTAuOSxhcjtxPTAuOCxhci1FRztxPTAuNyxlbi1VUztxPTAuNicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb24nOidrZWVwLWFsaXZlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSG9zdCc6J3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPcmlnaW4nOidodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzonaHR0cHM6Ly93ZWIudm9kYWZvbmUuY29tLmVnL2FyL0tDbG9naW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzonTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgxLjAuNDA0NC4xMzggU2FmYXJpLzUzNy4zNid9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YUFjY2Vzc1Rva2VuID0geydjb2RlJzpfY29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ3JhbnRfdHlwZSc6J2F1dGhvcml6YXRpb25fY29kZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWVudF9pZCc6J3dlYnNpdGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWRpcmVjdF91cmknOidodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXIvS0Nsb2dpbid9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kRGF0YUFjY2Vzc1Rva2VuID0gcmVxLnBvc3QoJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZy9hdXRoL3JlYWxtcy92Zi1yZWFsbS9wcm90b2NvbC9vcGVuaWQtY29ubmVjdC90b2tlbicsIGhlYWRlcnM9aGVhZGVyLCBkYXRhPWZvcm1EYXRhQWNjZXNzVG9rZW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4gPSBzZW5kRGF0YUFjY2Vzc1Rva2VuLmpzb24oKVsnYWNjZXNzX3Rva2VuJ10KICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0geydIb3N0Jzond2ViLnZvZGFmb25lLmNvbS5lZycsCiAgICAgICAgICAgICAgICAgICAgICdtc2lzZG4nOm51bWJlciwKICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOmYiQmVhcmVyIHthY2Nlc3NfdG9rZW59IiwKICAgICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb24nOidLZWVwLUFsaXZlJywKICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOidNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4xLjA7IERSQS1MWDIpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83MC4wLjM1MzguMTEwIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzonYXBwbGljYXRpb24vanNvbid9CiAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZy9zZXJ2aWNlcy9keGwvcG9tL3Byb2R1Y3RPcmRlcicKICAgICAgICAgICAgICAgICAgICBkYXRhNCA9ICd7ImNoYW5uZWwiOnsibmFtZSI6Ik1vYmlsZUFwcCJ9LCJvcmRlckl0ZW0iOlt7ImFjdGlvbiI6ImFkZCIsInByb2R1Y3QiOnsiY2hhcmFjdGVyaXN0aWMiOlt7Im5hbWUiOiJFeGVjdXRpb25UeXBlIiwidmFsdWUiOiJTeW5jIn0seyJuYW1lIjoiTGFuZ0lkIiwidmFsdWUiOiJlbiJ9XSwicmVsYXRlZFBhcnR5IjpbeyJpZCI6IiVzIiwibmFtZSI6Ik1TSVNETiIsInJvbGUiOiJTdWJzY3JpYmVyIn1dLCJpZCI6IiAxR1ZGQXBwUHJvbW8iLCJAdHlwZSI6Ik1JIn19XSwiQHR5cGUiOiJNSVByb2ZpbGUifScgJSBudW1iZXIKICAgICAgICAgICAgICAgICAgICByNCA9IHJlcXVlc3RzLnBvc3QodXJsLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9ZGF0YTQpLnRleHQKICAgICAgICAgICAgICAgICAgICBpZiAnQ29tcGxldGVkJyBpbiByNDoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiAiICogNjApCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdceDFiWzA7MzVtU3VjY2VzcyBMb2dpbicpCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIgIiAqIDYwKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHgxYlswOzMzbU1CIEFkZGVkIFN1Y2Nlc3NmdWxseScpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiAiICogNjApCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdceDFiWzA7MzJtRG9uZS4gRW5qb3knKQ==
